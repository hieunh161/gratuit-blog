{"pages":[],"posts":[{"title":"ecommerce-kpi","text":"Most businesses are data rich, but information poor. https://www.cloudways.com/blog/ecommerce-kpis/ #Ecommerce KPIs Average Order Value (AOV) Also known as the Average Market Basket, the AOV lets you know how much your customers typically spend on one single order. AOV = Total Revenue/Number of order Gross Profit It is an important ecommerce KPI and helps entrepreneurs to plan ahead. Gross Profit = Total Cost of Goods Sold – Total Number of sales. Conversion Rate (CR) CR is the percentage that identifies at what rate people are purchasing your products. Conversion Rate = (Total Number of Visitors on the Website / Total Number of Conversions) x 100 Shopping Cart Abandonment Rate (CAR) This ecommerce KPI tells you how many visitors are adding products to the shopping cart but are not checking out or purchasing them. Reduce friction in the checkout process to improve this number. CAR = (Total Number of Completed Transactions / Total Number of Shopping Carts) x 100 Shopping Cart Conversion Rate (CCR) This ecommerce KPI measures how many visitors actually complete the checkout process by purchasing the products. CCR = (Total Conversions / Total Number of Visitors) x 100 Cost of Goods Sold (COGS)Cost of Goods Sold (COGS) It’s the amount you’re spending to sell your product. For example, manufacturing costs, employee wages, overhead costs, etc. COGS = Beginning Inventory Costs (of the year) + Additional Inventory Costs (purchased during the year) – Ending Inventory (at the end of the year) Customer Lifetime Value (CLV) It tells you the worth of each customer to your business. Strengthen relationships by focusing on customer loyalty to improve this number. It will help you understand your cost per acquisition. CLV = (Customer’s Annual Profit Contribution x Average Number of Year as Customer) – the Initial Cost of Customer Acquisition Churn Rate For an online business, the churn rate lets you know at what pace your customers are leaving your brand or canceling subscriptions. Formula: Begin by subtracting the total number of customers remaining at the end of the month from the number of customers at the beginning of that month and divide by the total number of customers at the beginning of the month. Multiply by 100 for its percentage and further, multiply it by twelve to get the annual churn rate. Customer Acquisition Cost (CAC) This ecommerce KPI tells you how much you’re spending to acquire a new customer. You can measure it by analyzing your marketing spend and how it breaks down per customer. CAC = Costs Spent on Acquiring Customers / Number of Customers Acquired Repeat Purchase Rate (RPR) It tells you the number of customers that return to your website in order to make another purchase. It can help you measure customer loyalty as well as you can plan your sales strategies. RPR = Purchases from Repeat Customers / Total Purchase Average Profit Margin It is the percentage which represents your profit margin over a specific period of time. Average Profit Margin = Gross Profit / Revenue Revenue Per Click (RPC) It’s simply the average revenue for each click on all of your pay-per-click campaigns. It allocates a value to every paid click.","link":"/gratuit-blog/2020/04/30/ecommerce-kpi/"},{"title":"Guide to wirte post in blog","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/gratuit-blog/2020/04/05/guide-to-wirte-markdown/"},{"title":"Các định luật phần mềm – Phần 3","text":"Định luật KerckhoffsTrong lĩnh vực mã hóa có một định luật được phát biểu bởi Auguste Kerkhoffs nói rằng: In cryptography, a system should be secure even if everything about the system, except for a small piece of information — the key — is public knowledge.Một hệ thống phải được an toàn ngay cả khi kẻ thù biết được tất cả mọi thứ về hệ thống trừ một thứ đó là key mã hóa. Định luật này xuất phát từ thế kỷ 19 và nó dường là tiền đề cho mọi phát minh về mã hóa sau này. Trong thế chiến thứ 2 khi mà hoạt động tình báo trở nên vô cùng phổ biến và cuộc chiến về mã hóa đã cho ra đời hàng trăm phát minh mới về mã hóa trong thời gian này thì định luật này được xem như là cơ sở. Và hiện nay với các mã hóa hiện đại càng thể hiện sự đúng đắn của định luật này. Định luật Reed The utility of large networks, particularly social networks, scales exponentially with the size of the network.Độ mở rộng của các mạng xã hội tỉ lệ với hàm số mũ Được phát biểu bởi David Reed nói về mức độ phát triển của một mạng lớn, đặc biệt là mạng xã hội. Lý do tại sao lại là hàm số mũ mà ko phải hàm bình phương là vì số nhóm con của một mạng xã hội có N thành viên sẽ là 2^N − N − 1, nó tăng nhanh hơn rất nhiều so với số lượng connection chỉ là N(N-1) (Định luật Metcalfe) Định luật ZawinskiĐịnh luật nói về độ mở rộng của một phần mềm Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can.Tất cả các chương trình sẽ được mở rộng cho tới khi nó đọc được mail, những chương trình ko đạt được điều đó sẽ được thay thế bởi chương trình có thể làm được. Nó nói lên mức độ phổ biến và sự quan trọng của mail trong hệ thống thông tin. Hầu như ngày nay tất cả các chương trình đều liên kết tới email, không có chương trình nào mà ko sử dụng địa chỉ email để đăng ký cả. Hiện nay có một dị biến nói thêm về RSS nhưng ko phổ biến. Hiện tại email vẫn là số 1 trong tất cả các hệ thống. Định luật ConwayMột định luật vô cùng quan trọng thể hiện sự phản ánh cấu trúc của phần mềm Any piece of software reflects the organizational structure that produced itBất kỳ phần nào của phần mềm cũng phản ánh cấu trúc đã tạo ra nó Đây là định luật được Conway đưa ra vào năm 1968 về cấu trúc hệ thống phần mềm. Nó cho phép bạn có thể hiểu được cách thức, cấu tạo của hệ thống khi biết được một phần của phần mềm. Nó là hệ quả của việc nhiều người cùng làm trong cùng một hệ thống. Giả sử A và B làm 2 modul 1 và 2 thì để 1 và 2 kết nối được với nhau thì A và B phải tạo ra interface để các module ấy có thể nói chuyện được với nhau. Hoặc giả sử A làm một module và nếu B muốn dùng module đó thì trong OO B thường sẽ extend module của A vì sợ làm ảnh hưởng tới code của A, tuy nhiên nếu A thêm chức năng có thể A sẽ sửa trực tiếp module chứ ko phải extend nó. Đó chính là ý mà conway muốn nói đến trong định luật này. Định luật FittĐây là định luật về độ usability của hệ thống. Time = a + b log2 ( D / S + 1 ) phát biểu bằng lời như sau The time to acquire a target is a function of the distance to and the size of the target.Thời gian để đạt được một mục tiêu là hàm phụ thuộc vào khoảng cách và kích thước của mục tiêu Nó ảnh hưởng rất lớn đến các nhà thiết kế. Kể ra thiết kế các module để reuse trong phần mềm hay là thiết kế giao diện. Ví dụ như việc đặt menu ở góc trái bên dưới là vị trí sẽ tốn thời gian nhất. Vì khoảng cách xa và diện tích bé. Dấn tới sẽ tốn thời gian để bạn có thể thao tác với menu. Ngược lại nếu bạn muốn module nào dễ thao tác, bạn có thể làm diện tích to và đặt ở trung tâm. Định luật này hầu hết các designer đều rất thông thạo. Định luật HickĐịnh luật liên quan tới thời gian đưa ra quyết định cho bạn, được phát biểu như sau. The time to make a decision is a function of the possible choices he or she has.Thời gian đưa ra quyết định sẽ là một hàm phụ thuộc các khả năng lựa chọn mà bạn cóTime = b log2(n + 1) Thời gian sẽ phụ thuộc vào hàm số log cơ số 2. Tại sao lại là log cơ số 2 thì đó chính là do cơ chế não của chúng ta phân tích theo nhị phân. Thường thì chúng ta sẽ làm theo cơ chế loại bỏ. Và chính vì thế có công thức trên. Áp dụng công thức này bạn cũng có thể tính được thời gian để não nhận ra đáp án cho câu hỏi chắc nghiệm. Giả sử đề thi của bạn có 4 câu trả lời khả dĩ. Bạn mất 2 giây để đọc hiểu câu hỏi, thời gian não bạn đưa ra quyết định dựa trên một sự kiện là 0.1s. (Chú ý đây là thời gian não phản ứng. Thông thường khi có tai nạn chẳng hạn, thời gian để não đưa ra phản ứng sau khi nhận biết có sự kiện cũng khoảng 0.1s) và đưa vào công thức bạn sẽ có thời gian để bạn biết câu trả lời của câu hỏi là 2.35s. Và nó cũng có thể mở rộng ra với việc đưa ra quyết định của một nhóm bạn. Tuy nhiên hệ số sẽ khác. Bạn thử áp dụng vào thực tế khi cả nhóm bạn quyết định trưa nay đi ăn ở đâu thử xem. Cũng là một việc thú vị đấy chứ. Định luật Occam RazorĐịnh luật phát biểu rằng The explanation of any phenomenon should make as few assumptions as possibleSự giải thích cho bất kỳ hiện tượng nào nên đơn giản nhất có thể.Định luật này nhấn mạnh rằng cách giải thích nào đơn giản nhất thường là cái đúng. Các nhà thám tử dùng định luật này để loại bỏ dần các đối tượng tình nghi, các bác sĩ dùng định luật này để tìm ra nguyên nhân bệnh dựa trên một tập các triệu chứng. Bạn có thể xem thêm ở đây để hiểu thêm về định luật này. Ngoài các định luật đã nêu còn rất nhiều định luật khác nữa bạn có thể tham khảo ở wiki. Nó bao gồm rất nhiều định luật từ vật lý , toán học, hóa học, sinh học …. khác nữa.","link":"/gratuit-blog/2020/04/05/software-principle-3/"},{"title":"Tìm hiểu về Hema, nền tảng của chiến lược new retail của Alibaba.","text":"Alibaba dự định tái phát minh bán lẻ offline dựa vào số hoá theo dõi thực phẩm từ cửa hàng đến cửa hàng, robot dịch vụ và thanh toán không dùng tiền mặt. Jackma đưa ra thuật ngữ “New Retail” tại một cuộc họp ngắn với các nhà đầu tư vào năm 2016, và nó là trụ cột chính và là điểm khởi đầu của 5 chiến lược trọng điểm mà Alibaba tin rằng sẽ cho phép họ tiếp tục phát triển mở rộng các dịch vụ của họ không chỉ ở Trung Quốc mà là trên toàn cầu. “New Five” bao gồm : new retail, new finance, new manufacturing, new technology and new energy. Trong khi nhiều người khen ngợi Amazon vì những nỗ lực của họ để pha trộn bán lẻ online và offline thông qua Amazon Go, nhưng theo nhiều cách thì họ đang phải đuổi theo Alibaba. Hema Xiansheng là chuỗi siêu thị Alibaba mở ra và năm 2016 và nó đã mở rộng tới 87 cửa hàng khắp Trung Quốc tới 10/2018 và dự định sẽ mở thêm 2000 cửa hàng nữa trong 5 năm tới. New Retail là gì?Với những người chưa quen thuộc, New Retails ám chỉ tới sự hợp nhất của thương mại điện tử và cửa hàng truyền thống thông qua sự tích hợp cả trải nghiệm online và offline trên một chuỗi giá trị duy nhất. Thường được kết hợp với khái niệm ban đầu là O2O (Offline to Online), nhưng khác với O2O, New Retail thay đổi mô hình tương tác bằng cách kết hợp những thứ tốt nhất của cả online và offline bao gồm logistics, dữ liệu, thanh toán, các thiết bị thông minh và nhiều thứ khác nữa. Nhiều người cảm thấy lạ khi Alibaba đầu tư vào thị trường bán lẻ truyền thống. Nhưng các con số chỉ ra rằng, Trung Quốc là thị trường đi đầu thế giới về phát triển thương mại điện tử, mặc dù vậy tỉ lệ bán lẻ truyền thống vẫn chiếm 80% tổng doanh số ở Trung Quốc. (Tỉ lệ này ở Mỹ là 86%, ở Nhật là 89%). Do đó, không có gì lạ khi Alibaba nếu muốn mở rộng thị phần thì phải đặt một bước chân vững chắc vào thị trường bán lẻ truyền thống. Hema Chúng tôi tin rằng tương lai của bán lẻ sẽ là sự kết hợp hài hoà giữa online và offline, và Hema sẽ là một ví dụ điển hình cho sự phát triển này Daniel Zhang, CEO of Alibaba Group Hema có 3 chức năng cơ bản bao gồm Siêu thị Nhà hàng Trung tâm thực hiện các order Hema sử dụng một app riêng để gắn kết các thành phần này lại với nhau. Nó cho phép ảo hoá mọi thứ cho khách hàng. Tất cả trải nghiệm từ thanh toán, tìm kiếm sản phẩm, kiểm tra hàng hoá tại quầy … được thực hiện toàn bộ trên điện thoại. Nếu khách hàng đang sử dụng các dịch vụ khác của alibaba như Alipay, Tmall/Taobao, thì các thông tin chi tiết về sở thích, lịch sử chi tiết đều có thể liên kết trực tiếp, cho phép ứng dụng hiểu rõ khách hàng và những gì khách hàng đã làm trên các nền tảng này. Điều này giúp tăng trải nghiệm của khách hàng lên. AISLES VÀ BARCODES Mỗi sản phẩm trong cửa hàng đều được trang bị thẻ giá và mã vạch và mã QR tương ứng. Các thẻ giá này được kết nối qua internet “e-inks” tags, nó cho phép các giá cả và thông tin được thay đổi nhanh chóng phụ thuộc và cung và cầu. Điều này được sử dụng cho các hàng tươi, mới trong mùa đặc biệt là hải sản và cho các hàng hoá phổ biến có sẵn trên ứng dụng Hema. Hầu hết các lối đi cũng được trang bị màn hình cảm ứng lớn. Những màn hình cảm ứng này cung cấp một cái nhìn tổng quan về các sản phẩm trong lối đi đó, hiển thị các đều xuất cho các sản phẩm tương tự, đề xuất ghép nối và hiển thị những sản phẩm nào phổ biến nhất - chúng thậm chí được phân chia theo mức độ phổ biến trong nhóm tuổi. Quét cho thông tin Quét mã code trên price tag với app Hema sẽ đưa khách hàng tới trang thông tin chi tiết của sản phẩm và nó sẽ lưu lại tất cả thông tin liên quan tới sản phẩm. Với các hàng hoá hải sản, thông tin sẽ có nhiều hơn và chi tiết hơn. Các trang sản phẩm này sẽ cho phép người dùng xem được mọi thông tin từ các thành phần và hương vị cho đến các đề xuất đã được cá nhân hoá, công thức nấu ăn và đánh giá dành cho người mua. Tuỳ chọn giao tận nhà cũng có sẵn và thường được giảm giá với các phiếu giảm giá theo thời gian thực và các dịch vụ kèm theo. Tracking thực phẩm Người dùng Trung Quốc rất thích đồ ăn tươi, và rất xem trọng vấn đề này. Ở một đất nước mà an toàn thực phẩm và nguồn gốc thực phẩm đang là 1 vấn đề rất được chú ý thì việc minh bạch thông tin rất quan trọng. Do đó Hema xây dựng hệ thống cho phép tất cả các hàng hoá tươi có các thông tin giúp người dùng có thể nắm được toàn bộ hành trình của sản phẩm từ nông trại cho tới cửa hàng bao gồm: Nguồn gốc sản phẩm Công ty cung cấp sản phẩm và background Với thịt, thông tin cuộc sống của động vật (Thông tin ngày nó được chuyển tới nông trại hoặc khi nó được ra đời, ngày giờ giết mổ và khi nào nơi nào nó được chuyển tới và đi). Thông tin thời gian được chính xác tới mức độ giây. Thông tin vận chuyển như biển số xe, nhiệt độ bên trong xe tải với các mặt hàng cần di chuyển trong kho lạnh. Bản sao chính thức của giấy chứng nhận an toàn thực phẩm với giấy phép kinh doanh hoàn chỉnh với một con dấu chính thức của chính phủ Ngày đến tại cửa hàng để khách hàng có thể đánh giá độ tươi Nấu rau củ Một trong những điểm thu hút nổi bật tại bất kỳ Hema nào là phần hải sản tươi sống. Được xây dựng trên một khu vực rộng mở, khách hàng có thể duyệt, xem và kiểm tra hải sản của họ trực tiếp, một điều rất quan trọng với người tiêu dùng Trung Quốc. Một điều đặc biệt là cho dù hải sản tới từ khắp nơi trên thế giới nhưng nếu nó có mặt trong cửa hàng của Hema thì nó đã được đánh bắt trong 72h qua. Người dùng có thể mua và mang về nhà bình thường.Tuy nhiên người dùng cũng có thể chọn ăn tại chỗ bởi một trong số các nhà hàng ở trong store và thưởng thức nó ở ngay trong cửa hàng. Nhà hàng với robot Mỗi cửa hàng Hema đều được trang bị khu vực ăn uống của khách hàng, tuy nhiên đặc biệt Hema là cửa hàng đầu tiên ra mắt nhà hàng robot của riêng mình. Việc truy cập rất đơn giản, quét bằng điện thoại của mình để lấy số chỗ ngồi, tới chỗ ngồi đó và quét barcode để truy cập tất cả menu của cửa hàng. Ở đó người dùng có thể đặt món bao gồm cả các món cung cấp từ khu vực hải sản tươi sống. Khi mọi việc hoàn tất, món ăn sẽ được đặt trên robots được chuẩn bị bởi đầu bép và nó sẽ được đưa tới trực tiếp bàn. Nó được phối hợp theo một quy trình hiệu quả để tiết kiệm thời gian chờ đợi và thanh toán. Đối với phía trước của cửa hàng là như thế thì đằng sau nó các hệ thống của việc chuẩn bị thức ăn sẽ như thế nào? Trung tâm thực hiện các order​ ​ Cửa hàng Hema có các nhân viên tương tự như các siêu thị thông thường, nhưng bạn sẽ thấy hầu hết các nhân viên của họ rất bận rộn, chạy quanh cửa hàng làm đầy các túi hàng hoá khác nhau. Điều này là do các cửa hàng phục vụ như một trung tâm phân phối, thu nhận và thực hiện cho các đơn hàng trực tuyến. Đối với những khách hàng sống trong bán kính 3km quanh cửa hàng, Hema cho phép giao hàng cho khách hàng trong vòng 30 phút. Nhân viên hoàn thành các đơn đặt hàng ngay trong cửa hàng để thu thập các mặt hàng được đặt hàng trong 7 phút hoặc ít hơn. Gần đây Hema mở rộng dịch vụ giao hàng trong 30 phút để hoạt động gần 24h mỗi ngày - với dịch vụ thêm vào từ 10h tối tới 7h sáng. Ngoài ra các bữa ăn nấu sẵn có sẵn để giao hàng tới 1h sáng. Sau khi nhân viên chọn đơn hàng, họ được đặt trên băng chuyền chạy ngang trần nhà của cửa hàng, vận chuyển chúng ngay trên đầu các khách hàng. Phía sau cửa hàng là nơi các đơn hàng được đóng gói thành các pack hàng và gửi tới tận nhà khách hàng. https://youtu.be/dO4yUglO1n8 Thanh toán![Quầy thanh toán tự độn]g(https://miro.medium.com/max/6048/1*im5jMy4kL3HzyQ9xxNYscQ.jpeg) Thanh toán tự động là quy chuẩn ở Hema, nó nhanh và dễ dàng đến mức có thể cho phép KH thanh toán bằng khuôn mặt, sử dụng công nghệ thanh toán bằng nhận diện khuôn mặt của Alipay. tất cả trải nghiệm đều ko cần tới tiền mặt. Một điều thú vị là số lượng máy tính tiền tự động rất ít so với quy mô cửa hàng. Và cũng ko có bất kỳ các hàng đợi cũng như sự support của nhân viên cửa hàng. Việc này là chiến lược giúp khuyến khích người dùng đặt hàng online và đi sâu hơn vào hệ sinh thái của các dịch vụ đặc biệt là logistics. Điều này cũng được chứng minh qua sự kiện với các nhà đầu tư mới đây của Alibaba, nơi họ đã đưa ra số liệu 60% tất cả các đơn hàng của Hema được thực hiện trực tuyến. Một số suy nghĩTầm nhìn về bán lẻ của Alibaba vượt xa những gì mà Hema đang có, nhưng thông qua Hema nó là một bài kiểm thử tuyệt vời cho các sản phẩm services của tương lai. Sẽ có nhiều hơn các công nghệ được ứng dụng như các camera cóng nghệ nhận diện, các trải nghiệm tương tác mạng ở cửa hàng, giao hàng dựa trên các subscription của người dùng … Alibaba’Tao cafe là một cửa hàng new retail khác đang hoạt động, với quy mô bé hơn nhiều so với Hema. Nó tương tự Amazon Go hơn theo cách tiếp cận ko có tiền mặt, đi vào đi ra một cách tự động thông qua việc sử dụng camera và sensor cũng như các dữ liệu khách hàng theo thời gian thực. Starbuck và Alibaba đã hợp tác với nhau để cùng nhau chuyển đổi nên cà phê của Trung Quốc. Một trong những hoạt động đó là đưa Startbuck vào Hema bằng việc sử dụng Robot kết hợp cùng với mobile để order và delivery. Theo: https://medium.com/@ronihiranand/inside-hema-a-look-into-the-cornerstone-of-alibabas-new-retail-strategy-bde0368ea992","link":"/gratuit-blog/2020/06/21/Alibaba-hema/"},{"title":"software-principle-1","text":"Mở đầuTrong các lĩnh vực tự nhiên, các nhà khoa học đã tìm ra rất nhiều định luật, quy luật của tự nhiên và đã trở thành những kiến thức nền tảng trong xã hội. Nó giúp chúng ta hiểu rõ, giải thích được các hiện tượng một cách thấu đáo hơn. Trong lĩnh vực phần mềm, dù nó khác so với một lĩnh vực khoa học, song trong thời gian ngắn xuất hiện của mình, nó cũng đã được rất nhiều nhà nghiên cứu tìm ra được những quy luật và họ đã phát biểu thành các định luật mang tên mình. Hiểu rõ được các định luật chi phối trong ngành phần mềm không chỉ giúp chúng ta hiểu hơn công việc mà còn giúp chúng ta thay đổi xử lý các vấn đề tốt hơn. Định luật PostelĐịnh luật Postel hay còn gọi là định luật về độ ổn định của một hệ thống (Robustness law) được đặt tên theo nhà khoa học Postel là người tiên phong trong lĩnh vực phát triển nền tảng internet. Ông phát biểu định luật này khi viết đặc tả cho giao thức TCP (transmission control protocol) nổi tiếng. Be conservative in what you send, liberal in what you acceptHãy tuân thủ chặt chẽ những gì bạn gửi đi, tự do với những gì bạn chấp nhận Nói theo một cách khác, code viết trong các chương trình khi gửi lệnh hoặc dữ liệu tới chương trình khác, hoặc module khác của chương trình nên tuân thủ chặt chẽ các đặc tả, tuy nhiên code khi nhận dữ liệu thì phải làm sao nó có thể chấp nhận được cả các dữ liệu không tuân thủ cấu trúc, hoặc ý nghĩa không rõ ràng. Thực tế thì bạn gặp rất nhiều trường hợp liên quan tới định luật Postel như code check lỗi input và handle exception… trong phần mềm. Định luật Parkingson Work expands so as to fill the time available for its completionCông việc luôn tự mở rộng ra để chiếm đủ thời gian được ấn định cho nó Định luật này được C. Northcote Parkinson, nhà văn và sử học người Anh đưa ra. Nó không chỉ dành cho lĩnh vực phần mềm nói riêng mà nó mở rộng cho tất cả các lĩnh vực khác. Ý nghĩa của nó là khi bạn dự định làm một công việc gì đó trong một khoảng thời gian lớn hơn so với thời gian nó có thể hoàn thành thì bản thân công việc sẽ mở rộng ra để chiếm nốt phần thời gian thừa của bạn. Ví dụ như công việc này bạn dự định làm trong 1 tuần, tuy nhiên thực tế thì có thể hoàn thành công việc trong 3 ngày. Vậy khi làm công việc thì nó sẽ phát sinh những việc để chiếm hết 1 tuần của bạn. Định luật này vô cùng quan trọng đối với các nhà quản lý. Hiểu rõ định luật này sẽ giúp các nhà quản lý hoạch định để tăng productivity của nhân viên, cũng như sử dụng thời gian rảnh rỗi một cách hợp lý. Và nó cũng dẫn tới một kiểu quản lý mới đó là các nhà quản lý cố gắng chia nhỏ công việc ra nhỏ nhất có thể để hạn chế tối đa ảnh hưởng của định luật Parkingson. Thường thì có thể là trong 1 ngày. Bạn có thể tự kiểm nghiệm với bản thân mình, thường những cách mà nhân viên áp dụng định luật parkingson là họ cố gắng nghĩ ra những việc không quan trọng để lấp đầy thời gian rảnh rỗi, như sắp xếp giấy tờ, pha cà phê … hoặc những công việc có productivity bằng 0. Định luật này còn áp dụng trong lĩnh vực quản lý tiền bạc với phát biểu sau: Expenditures rise to meet income.Các khoản chi tiêu sẽ tăng lên cho đến khi nó bằng với thu nhập. Nghĩa là nếu bạn ko có kế hoạch tích lũy, quản lý hợp lý tiền bạc thì cho dù thu nhập bạn tăng lên bạn cũng ko có hi vọng gì vào việc có tiền thừa cả, mà sẽ có các khoản chi phí khác phát sinh cho đến khi số tiền bằng với số tiền bạn kiếm được. Với sinh viên và nhân viên trẻ thì điều này thấy rất rõ ràng. Hiểu được định luật parkingson có thể giúp bạn biến nó thành lợi thế cho mình với các định hướng trước như dừng việc dành hàng giờ đồng hồ vào việc làm gì đấy, hãy cố gắng hoàn thành mọi việc càng sớm càng tốt và tận hưởng thời gian rỗi rãi còn lại. Định luật ParetoCòn được biết với định luật vô cùng nổi tiếng 80-20, hay là quy luật thiểu số quan trọng, phân bố nhân tố, nó được phát biểu như sau: For many phenomena, 80% of consequences stem from 20% of the causes.Với rất nhiều hiện tượng, thì 80% kết quả là do 20% nguyên nhân gây ra Nó được đặt tên theo nhà kinh tế người Ý Vilffedo Pareto với công trình đầu tiên về quan sát 80% đất đai ở Ý là thuộc 20% dân số, và sau đó được các nhà nghiên cứu khác áp dụng rộng rãi trong tất cả các hiện tượng trong xã hội. Trong lĩnh vực phần mềm chúng ta có thể hiểu theo một số cách rất quan trọng như sau. 80% khối lượng công việc sẽ do 20% số người làm ra. Hay 80% bugs sẽ đến từ 20% số dòng code… hoặc là 80% khối lượng công việc khó nhất sẽ nằm trong thời gian 20% cuối cùng. Hay đơn giản là 20% sếp sẽ nhận thu nhập bằng 80% chẳng hạn. Trước kia có một lần nói chuyện với một sếp cũ thì có biết là chính sách công ty cũng sẽ là giữ 20% key còn lại thì không quan tâm lắm. Nên dù sao việc của bạn khi hiểu được quy luật này là hãy phấn đấu để trở thành 20% quan trọng nhất ở bất kỳ vị trí nào. :) quy luật này dù hiện hữu ở rất nhiều lĩnh vực nhưng vấn đề của nó là không phải lúc nào bạn cũng biết được cái nào là 20%. Định luật PeterNăm 1968 trong cuốn sách “The peter principle” Dr. Laurence J. Peter đã đưa ra định luật phát biểu rằng: “In a hierarchy every employee tends to rise to his level of incompetence.”Trong mô hình phân cấp, các nhân viên sẽ có xu hướng vươn lên tới các vị trí mà năng lực anh ta không đáp ứng được. Theo như định luật này thì một lúc nào đó, cuối cùng một nhân viên sẽ vươn tới được vị trí mà tất cả khả năng tốt nhất của anh ta được phát huy. Và những vị trí cao hơn thì năng lực của anh ta không còn phù hợp và đáp ứng được nữa. Hoặc nó còn có thể hiểu là dù anh ta còn khả năng nhưng anh ta không còn rèn luyện những kỹ năng để đáp ứng vị trí công việc nữa. Với những công ty phát triển nhanh đột biến thì hiện tượng này xảy ra rất nhiều. khi các sếp hi vọng các nhân viên xuất sắc ở cấp dưới có thể đảm nhiệm tốt các công việc phía trên vì khả năng của họ. Ví dụ những người có năng lực kỹ thuật tốt thường sẽ đảm nhiệm việc quản lý khi cty phát triển. Tất nhiên có nhiều người có khả năng phù hợp, nhưng cũng có những người không thể đáp ứng được. Trong quản trị nhân sự cấp cao, điều này đặc biệt quan trọng. Với quản trị nhân sự chung trong toàn công ty lớn, hiện nay họ cũng cố gắng hạn chế nhất có thể việc “ngồi nhầm chỗ” này khi đánh giá đúng được năng lực nhân viên. Định luật HofstadterĐịnh luật này là một phần của cuốn sách An Eternal Golden Braid của Douglas Hofstadter xuất bản năm 1979. Định luật này đặc biệt đúng, ngay cả áp dụng vào thời gian tôi dành để viết bài blog này. Thời gian để viết xong nó tốn nhiều hơn những gì tôi đã mong muốn. Định luật này phát biểu rằng: It always takes longer than you expect, even when you take into account Hofstadter’s Law.Một nhiệm vụ thường tốn nhiều thời gian hơn bạn mong muốn, ngay cả khi bạn biết và hiểu định luật này. Định luật này được giới thiệu lần đầu tiên liên quan tới vấn đề cuộc chiến cờ giữa máy tính và người khi mà các kỳ thủ hàng đầu đã liên tục đánh thắng máy ngay cả khi máy tính tính toán trước được rất nhiều nước đi của các kỳ thủ. Hofstadter đã viết : “Trong những ngày đầu của cờ máy, người ta đã estimate rằng sẽ mất 10 năm để biến cờ máy thành vô địch, không có đối thủ. Nhưng sau khi 10 năm trôi qua, có vẻ như ngày mà cờ máy thành vô địch sẽ phải mất thêm 10 năm nữa.” Và ông ấy lấy đó như là một luận cứ để hình thành nên định luật của mình. Trong lĩnh vực phần mềm bạn có thể hiểu là thông thường thời gian thực hiện xong một task, module sẽ thường dài hơn bạn đã ước lượng và mong muốn. Định luật này được đề cập và nhắc đến rất nhiều trong các programmers. Trong các cuốn về tăng hiệu suất công việc như The mythical of man-month hay extreme programming vấn đề này cũng được thảo luận rất nhiều. Định luật này phản ánh sự phức tạp trong vấn đề estimate ngay cả với những người có kinh nghiệm. To be continue.","link":"/gratuit-blog/2020/04/05/software-principle-1/"},{"title":"Các định luật phần mềm – Phần 2","text":"Định luật murphyMột định luật vô cùng nổi tiếng khác mà có lẽ tất cả mọi người đều biết, nhưng không phải ai cũng hiểu rõ về nó đó chính là định luật murphy. Được phát biểu như sau: If anything can go wrong, it will.Nếu một việc có thể diễn tiến xấu, nó sẽ diễn tiến đúng như thế Định luật này còn được gọi là Định luật bánh bơ và được được nhận giải IG nobel vào năm 2003. Nó được chuyên gia tên lửa A. Murphy phát biểu vào năm 1949 . Nó nguồn gốc từ một nghiên cứu của không quân Mỹ về tác dụng của quá trình giảm tốc nhanh trên các phi công. Người tình nguyện bị buộc trong xe trượt tuyết gắn động cơ phản lực, và phản ứng của họ khi xe dừng đột ngột sẽ được ghi lại nhờ hệ thống điện cực gắn khít vào bộ ghế ngồi do đại úy Edward A. Murphy thiết kế. Tuy nhiên, Murphy đã không ghi được số liệu nào sau một thử nghiệm tưởng chừng không có sai sót. Thì ra, một điện cực bị mắc sai. Sai lầm hy hữu này khiến Murphy phải thốt lên: “Nếu trong nhiều cách có một cách sai – sẽ có người thực hiện cách sai đó”. Đã bao giờ bạn đi ra đường, đến công ty và gặp cảnh tắc đường, bạn thấy như thế và quyết định rằng sẽ chọn một con đường vòng mà có khả năng nhanh hơn, tuy nhiên vẫn lo ngại rằng có thể nó cũng bị tắc, và thực tế rằng con đường mới bạn chọn cũng tắc khiến bạn có thể còn chậm hơn. Hoặc có rất nhiều lần những điều bạn lo sợ đã xảy ra. Tôi tin rằng điều đó với ai cũng có. Có nhiều người cho rằng đó là định luật chi phối mọi thứ. Vậy liệu nó có bí ẩn gì đằng sau không. Và có rất nhiều người sau khi trải qua một vài điều như thế bắt đầu tin vào số mệnh. Vậy sự thật là gì? Chúng ta sẽ nhìn định luật murphy dưới con mắt của các nhà khoa học như sau: Sau một nghiên cứu và cố gắng định lượng phương trình murphy, joel pel đã đưa ra phương trình như trên. Trong đó: PM là khả năng murphy mà một điều gì đó sẽ không đúng. KM là hằng số murphy, nó là một hằng số bằng 1. FM là hệ số murphy, nó là một số rất nhỏ, nhưng chúng ta có làm tròn xấp xỉ nó bằng 0.01. Các hệ sô I,C,U,F là các biến có thang đo từ 1-10 để miêu tả về sự kiện. Trong đó, I là độ quan trọng của kết quả hoặc kết quả sự kiện, C là độ phức tạp của hệ thống, U là mực độ khẩn cấp của hệ thống. F là mức độ thường xuyên sử dụng hệ thống. Từ 4 biến đó mà bất kỳ sự kiện nào cũng có thể mô tả được. Và với các giá trị đã cho bạn có thể tự tính được khả năng mà một sự việc có thể không đúng. Trong lĩnh vực phần mềm, định luật murphy ảnh hưởng nhiều nhất trong các phase : project planning, performance management, progress management, risk assesment … và nếu bạn nghĩ rằng nó chỉ có thể xảy ra ở những bước trên thì nó sẽ sai ở một bước khác nữa. Ý nghĩa của định luật murphy chính là những hiểm họa sẽ xảy ra ngay cả khi bạn không tiên đoán được. Để kết thúc về định luật murphy chúng ta sẽ thử áp dụng công thức murphy vào một số ví dụ minh họa sau: Giả sử bạn đang code cho một module của hệ thống, module này là một module rất quan trọng, vì nó được gọi bởi rất nhiều module khác (ví dụ như thao tác với dữ liệu bao gồm CRUD chẳng hạn, hoặc gì đó tùy bạn), và vì thế mà nó rất thường xuyên được gọi trong hệ thống của bạn. Vậy chúng ta thử đánh giá xem, khả năng module này của bạn code liệu có thể có xảy ra lỗi khi đưa vào sử dụng hay không. Độ quan trọng của hệ thống ta cho I = 9 (1 là thấp nhất, 10 cao nhất), module này giả sử tuy quan trọng nhưng ko đến nỗi quá phức tạp, ta cho là 5, và nó cần hoạt động trước khi các module khác hoạt động, ví dụ như bạn phải insert thì mới xử lý và trả kết quả về được, nên ta cho nó là 8, và cuối cùng nó rất hay được gọi nên độ thường xuyên là 9. Vậy áp dụng các công thức trên thì xác suất murphy sẽ là gần bằng 1. Nghĩa là chắc chắn sẽ có lỗi xảy ra với module của bạn khi đưa vào hoạt động, hoặc trong các điều kiện xấu. Tương tự như thế, bạn có thể tự điều chỉnh dữ liệu và sự kiện để có thể áp dụng vào các trường hợp khác. Trong lập trình có một trường phái lập trình để chống lại định luật murphy đó chính là lập trình phòng thủ. Ai có thời gian có thể tìm hiểu thêm. Định luật Brook Adding manpower to a late software project makes it later.Nếu thêm người vào một dự án chậm sẽ làm nó chậm hơn Nó được Brook là một quản trị dự án lâu năm ở IBM đúc kết ra sau rất nhiều dự án ông đã làm ở IBM, và được viết trong cuốn sách cũng vô cùng nổi tiếng The mythical man-month xuất bản năm 1975. Giờ đây định luật này nằm trong hầu hết các cuốn sách về quản trị lớn bé trên thế giới về phát triển phần mềm. Ông còn phát biểu nó dưới dạng một câu nói khác vô cùng hài hước: The bearing of a child takes nine months, no matter how many women are assigned.Không có cách nào để 9 bà mẹ có thể sinh ra một đứa trẻ trong 1 tháng. Có 2 điểm dùng để giải thích cho định luật brook trong phát triển phần mềm đó là: Sẽ mất một thời gian nhất định để người thêm vào dự án có thể quen với công việc. Dự án phần mềm là một công việc phức tạp, nhất là những dự án khó về mặt business, và những người mới thường phải đầu tiên là được đào tạo để làm quen với nó. Việc đào tạo này cũng yêu cầu tài nguyên từ dự án, như yêu cầu PM hoặc những người có kinh nghiệm đào tạo. Chính việc này đến lượt nó lại làm mất năng suất làm việc của những người có kinh nghiệm nó trên vì họ tốn thời gian vào đào tạo. Ngoài ra những người mới có thể còn làm tiến độ chậm đi khi họ có khả năng tạo ra các bugs mới cho hệ thống. Thứ 2 là sự tăng nhanh về kênh giao tiếp giữa các thành viên. Số kênh giao tiếp khác nhau có thể tăng nhanh với số người tham gia. Nó khiến cho công việc khó có thể được đồng bộ, và có thể chồng chéo, làm chậm trễ hơn. Tuy nhiên cũng có một số điểm có thể xem xét khi thêm người, đó là thêm vào giai đoạn sớm của dự án hoặc người thêm vào thực sự có kinh nghiệm, có khả năng. Định luật LinusĐược đặt tên theo Linus Torvalds người đã phát triển hệ điều hành linux, được phát biểu như sau: Given enough eyeballs, all bugs are shallowNếu có đủ số lượng người , thì số lượng bugs sẽ giảm đi. Linus là một trong những thiên tài trong phần mềm, ông đã phát triển nền tảng cho linux và đưa open code cho tất cả lập trình viên trên thế giới phát triển nó, chỉnh sửa và thêm vào. Tốc độ của hệ thống nhân linux ngày càng nhanh cùng với số lượng người tham gia phát triển nó. Enough eyeballs ở đây thể hiện cho số người làm việc và tham gia giải quyết vấn đề. Một phát biểu thông thường hơn của định luật linus là : Với một lượng đủ lớn các lập trình viên và các tester, hầu hết tất cả các vấn đề sẽ được xác định và sửa một cách nhanh chóng và dễ dàng. Định luật moore The power of computers per unit cost doubles every 24 month.Khả năng xử lý của máy tính trên mỗi đơn vị sẽ tăng gấp đôi sau mỗi 2 năm Hay Số lượng Transitor trên mỗi đơn vị inch vuông sẽ tăng lên gấp đôi sau mỗi năm Một định luật nổi tiếng khác mà hầu như ai cũng từng nghe đến, Định luật Moore lần đầu tiên được công bố rộng rãi trên tạp chí Electronics Magazine số ra ngày19/4/1965. Định luật Moore là một bước ngoặt lớn trong ngành công nghệ điện tử, giải thích tại sao nhà sản xuất có thể giảm giá thành trong khi vẫn tiếp tục nâng cao hiệu suất của phần cứng. Tuy nhiên, trong thời gian gần đây định luật Moore đã có nhiều biểu hiện bị thay đổi và kéo dài dần thời gian tăng đôi số transtior trên một đơn vị diện tích (một inch vuông). Tại thời điểm hiện nay (năm 2007), khoảng thời gian để tăng đôi số transistor là xấp xỉ 60 tháng. Nhiều nhà phân tích cho rằng trong tương lai không xa khi mà các áp dụng kỹ thuật đã không thể rút nhỏ kích cở của một transistor xuống hơn được (cụ thể là khi kiến trúc của transistor đã được rút xuống đến mức độ phân tử) thì định luật Moore sẽ không còn đúng nữa. Tuy nhiên với khoảng thời gian dài liên tục phát triển của mình, thì những thành tựu rực rỡ của ngành công nghiệp điện tử đã góp phần xây dựng rất nhiều thần kỳ trong thế kỷ vừa qua. Định luật WirthNăm 1995 Niklaus Wirth đưa ra định luật mang tên ông như sau: software is getting slower more rapidly than hardware becomes faster.Phần mềm đang dần nhanh hơn so với phần cứng. Ý nghĩa của định luật wirth là các phần mềm đang dần ngày càng phức tạp, và dần dần các phần cứng trở nên không đáp ứng được với sự phức tạp của nó. Nhất là trong quá trình vật liệu ngày càng khó khăn, thời gian định luật moore ngày càng kéo dài và có thể không còn đúng nữa, thì việc phần mềm vẫn đang phát triển vô cùng chóng mặt. Đơn giản như các hệ điều hành của microsoft, cứ chu kỳ khoảng 2 năm ra một bản, và các bản sau phức tạp hơn, yêu cầu phần cứng khắt khe hơn. Trên phương diện internet có thể hiểu như tốc độ truyền tải dữ liệu hạn chế, trong khi yêu cầu gửi tin video hoặc chất lượng dữ liệu cao thì ngày càng tăng cao. Chính điều đó cũng là một thách thức với ngành công nghiệp phần cứng.","link":"/gratuit-blog/2020/04/05/software-principle-2/"},{"title":"Vue coding convention","text":"1. Đặt tên component dùng nhiều từTên component nên dùng hai từ (đơn) trở lên, ngoại trừ component gốc. Việc này giúp tránh xung đột với các phần tử HTML hiện tại và tương lai, vì tất cả các phần tử HTML đều là từ đơn. 123456789// BADVue.component('todo', { // ...})export default { name: 'Todo', // ...} 123456789// GOODVue.component('todo-item', { // ...})export default { name: 'TodoItem', // ...} 2. data trong component - trả về functionKhi dùng thuộc tính data trong một component (nghĩa là ở bất cứ đâu trừ new Vue), giá trị của nó phải là một hàm trả về một object. 123456789101112// BADVue.component('some-comp', { data: { foo: 'bar' }})export default { data: { foo: 'bar' }} 123456789101112131415161718192021222324// GOODVue.component('some-comp', { data: function () { return { foo: 'bar' } }})export default { data () { return { foo: 'bar' } }}// Với đối tượng Vue gốc, bạn có thể dùng object,// vì chỉ có một đối tượng như thế này trong toàn bộ app.new Vue({ data: { foo: 'bar' }}) 3. Định nghĩa cho prop càng chi tiết càng tốtTrong code được commit, định nghĩa cho prop nên chi tiết đến mức có thể. Ít nhất bạn phải chỉ định kiểu dữ liệu của prop. Định nghĩa prop chi tiết có hai lợi ích: API của component được document, giúp hiểu dễ dàng hơn về cách dùng component. Khi code ở chế độ development, Vue sẽ cảnh báo nếu prop được truyền vào không đúng định dạng, giúp bạn phát hiện các lỗi có thể xảy ra. 123// BAD// Như thế này chỉ OK khi viết prototypeprops: ['status'] 1234567891011121314151617181920// GOODprops: { status: String}// Càng tốt hơn! props: { status: { type: String, required: true, validator: function (value) { return [ 'syncing', 'synced', 'version-conflict', 'error' ].indexOf(value) !== -1 } }} 4. Luôn dùng :key bên trong v-forSử dụng thuộc tính :key với v-for giúp ứng dụng ổn định và có thể dự đoán được bất cứ khi nào chúng ta muốn thao tác dữ liệu.Điều này giúp Vue có thể theo dõi trạng thái của các item cũng như có một tham chiếu liên tục đến các thành phần. Một ví dụ trong đó các :key cực kỳ hữu ích là khi sử dụng hình động Animation hoặc Vue transitions. Không có key, Vue sẽ chỉ cố gắng làm cho DOM hiệu quả nhất có thể. Điều này có thể có nghĩa là các yếu tố trong v-for có thể xuất hiện không theo thứ tự hoặc hành vi mà chúng ta mong muốn, cũng như khó dự đoán hơn. Nếu chúng ta có một tham chiếu khóa duy nhất cho từng thành phần, thì chúng ta có thể dự đoán tốt hơn cách ứng dụng Vue của chúng ta sẽ xử lý thao tác DOM. 12345&lt;!-- BAD --&gt;&lt;div v-for='product in products'&gt; &lt;/div&gt;&lt;!-- GOOD --&gt;&lt;div v-for='product in products' :key='product.id'&gt; 5. Tránh dùng v-if chung với v-forĐừng bao giờ dùng v-if trên cùng một phần tử với v-for. Có hai trường hợp thường gặp mà chúng ta có xu hướng làm như vậy: Để lọc các item từ một danh sách (ví dụ v-for=”user in users” v-if=”user.isActive”). Trong những trường hợp này, hãy thay thế users bằng một computed property trả về danh sách đã được lọc (ví dụ activeUsers). Để tránh hiển thị một danh sách mà ta muốn giấu (ví dụ v-for=”user in users” v-if=”shouldShowUsers”). Trong những trường hợp này, hãy chuyển v-if lên một phần tử cha (ví dụ ul, ol). 1234567891011121314151617181920// BAD&lt;ul&gt; &lt;li v-for=\"user in users\" v-if=\"user.isActive\" :key=\"user.id\" &gt; {{ user.name }} &lt;li&gt;&lt;/ul&gt;&lt;ul&gt; &lt;li v-for=\"user in users\" v-if=\"shouldShowUsers\" :key=\"user.id\" &gt; {{ user.name }} &lt;li&gt;&lt;/ul&gt; 123456789101112131415161718// GOOD&lt;ul&gt; &lt;li v-for=\"user in activeUsers\" :key=\"user.id\" &gt; {{ user.name }} &lt;li&gt;&lt;/ul&gt;&lt;ul v-if=\"shouldShowUsers\"&gt; &lt;li v-for=\"user in users\" :key=\"user.id\" &gt; {{ user.name }} &lt;li&gt;&lt;/ul&gt; 6. Thiết lập phạm vi cho style của componentSet phạm vi css cho các module bằng thuộc tính scoped 12345678910// BAD&lt;template&gt; &lt;button class=\"btn btn-close\"&gt;X&lt;/button&gt;&lt;/template&gt;&lt;style&gt;.btn-close { background-color: red;}&lt;/style&gt; 12345678910111213141516// GOOD&lt;template&gt; &lt;button class=\"btn btn-close\"&gt;X&lt;/button&gt;&lt;/template&gt;&lt;!-- Dùng thuộc tính `scoped` --&gt;&lt;style scoped&gt;.button { border: none; border-radius: 2px;}.button-close { background-color: red;}&lt;/style&gt; 12345678910111213141516// GOOD&lt;template&gt; &lt;button :class=\"[$style.button, $style.buttonClose]\"&gt;X&lt;/button&gt;&lt;/template&gt;&lt;!-- Dùng CSS module --&gt;&lt;style module&gt;.button { border: none; border-radius: 2px;}.buttonClose { background-color: red;}&lt;/style&gt; 12345678910111213141516// GOOD&lt;template&gt; &lt;button class=\"c-Button c-Button--close\"&gt;X&lt;/button&gt;&lt;/template&gt;&lt;!-- Dùng quy chuẩn BEM --&gt;&lt;style&gt;.c-Button { border: none; border-radius: 2px;}.c-Button--close { background-color: red;}&lt;/style&gt; 7. Đặt tên cho private propertyLuôn luôn dùng tiền tố $_ cho các private property trong một plugin, mixin vân vân. Tiếp theo, để tránh xung đột với code của các tác giả thư viện khác, thêm vào một phạm vi được định danh (ví dụ $tênPluginCủaBạn). 12345678910111213141516171819202122232425262728// BADvar myGreatMixin = { methods: { update: function () { } }}var myGreatMixin = { methods: { _update: function () { } }}var myGreatMixin = { methods: { $update: function () { } }}var myGreatMixin = { methods: { $_update: function () { } }} 1234567// GOODvar myGreatMixin = { methods: { $_myGreatMixin_update: function () { } }} 8. Các file componentMỗi component nên nằm trong một file riêng. Việc này giúp bạn mau chóng tìm ra một component khi cần chỉnh sửa hoặc xem lại cách dùng component đó. 12345678// BADVue.component('TodoList', { // ...})Vue.component('TodoItem', { // ...}) 12345678// GOODcomponents/|- TodoList.js|- TodoItem.jscomponents/|- TodoList.vue|- TodoItem.vue 9. Sử dụng quy chuẩn đặt tên cho file componentToàn bộ tên của các file component chỉ nên được đặt theo quy chuẩn hoặc là PascalCase hoặc là kebab-case. PascalCase hoạt động tốt nhất với tính năng tự điền (autocomplete) của các trình soạn thảo, vì nó nhất quán với cách chúng ta tham chiếu đến các component trong JS(X) và template, bất cứ khi nào có thể. Tuy nhiên, vì tên file trộn lẫn cả chữ hoa và chữ thường đôi khi tạo phiền toái trên các hệ thống phân biệt hoa thường, kebab-case cũng hoàn toàn có thể chấp nhận được. 1234567// BADcomponents/|- mycomponent.vuecomponents/|- myComponent.vue 1234567// GOODcomponents/|- MyComponent.vuecomponents/|- my-component.vue 10. Tên component nền tảngTên của các component nền tảng (base component), chỉ dùng để áp dụng style và convention cho toàn bộ ứng dụng, nên bắt đầu bằng một tiền tố đặc biệt, chẳng hạn như Base, App, hoặc V. 12345// BADcomponents/|- MyButton.vue|- VueTable.vue|- Icon.vue 123456789101112131415// GOODcomponents/|- BaseButton.vue|- BaseTable.vue|- BaseIcon.vuecomponents/|- AppButton.vue|- AppTable.vue|- AppIcon.vuecomponents/|- VButton.vue|- VTable.vue|- VIcon.vue 11. Tên của các component dạng single-instanceTên của các component dạng single-instance (chỉ có một đối tượng được khởi tạo trong toàn bộ vòng đời của ứng dụng) nên bắt đầu với mạo từ xác định The, đánh dấu tính chất “một và chỉ một mà thôi.” Điều này không có nghĩa là một component dạng này chỉ được dùng trên một trang duy nhất, mà là chỉ được dùng một lần mỗi trang. Các component này không bao giờ nhận vào các prop, vì prop là dấu hiệu của một component tái sử dụng lại được. 1234// BADcomponents/|- Heading.vue|- MySidebar.vue 1234// GOODcomponents/|- TheHeading.vue|- TheSidebar.vue 12. Tên các component có liên hệ chặt chẽ với nhauTên của component con có mối quan hệ khắng khít (tightly coupled) với component cha nên có tiền tố là tên component cha. Nếu một component chỉ có ý nghĩa trong ngữ cảnh của một component cha, mối quan hệ này nên được thể hiện rõ ràng bằng tên của component đó. Vì cách trình soạn thảo thường sắp xếp file theo thứ tự chữ cái, việc này cũng giúp các file liên quan được gần nhau. 123456789// BADcomponents/|- TodoList.vue|- TodoItem.vue|- TodoButton.vuecomponents/|- SearchSidebar.vue|- NavigationForSearchSidebar.vue 123456789// GOODcomponents/|- TodoList.vue|- TodoListItem.vue|- TodoListItemButton.vuecomponents/|- SearchSidebar.vue|- SearchSidebarNavigation.vue 13. Thứ tự từ trong tên của componentTên của component nên được bắt đầu với những từ cấp cao nhất (thường là chung nhất) và kết thúc bằng những từ mô tả. 12345678// BADcomponents/|- ClearSearchButton.vue|- ExcludeFromSearchInput.vue|- LaunchOnStartupCheckbox.vue|- RunSearchButton.vue|- SearchInput.vue|- TermsCheckbox.vue 12345678// GOODcomponents/|- SearchButtonClear.vue|- SearchButtonRun.vue|- SearchInputQuery.vue|- SearchInputExcludeGlob.vue|- SettingsCheckboxTerms.vue|- SettingsCheckboxLaunchOnStartup.vue Reference:Vue official guideMedium article","link":"/gratuit-blog/2020/04/05/vue-tips-1/"},{"title":"5 cấp độ của làm việc từ xa - và tại sao bạn có thể đang ở cấp độ 2","text":"COVID-19 đã buộc các công ty trên toàn thế giới phải ban hành - hoặc tạo ra - các phương thức làm việc từ xa. Các công ty như Box, Amazon, Airbnb, Facebook, Google và Microsoft đều đã và đang thử nghiệm với nhân viên của họ một số biến thể củahình thức làm việc từ xa. Giờ đây, các tổ chức truyền thống ở các lĩnh vực như bất động sản, kế toán và chính quyền địa phương cũng bắt đầu với hình thức này. Các cuộc gọi nhóm video call trên Zoom, như trong tấm ảnh dưới đây, được thực hiện bởi một số nhóm làm việc vừa bắt đầu làm quen với hình thức làm việc từ xa, đang tràn ngập trên Twitter và LinkedIn cũng như Facebook. Công ty AutomatticNói đến đẳng cấp cao nhất trong hình thức làm việc từ xa, có rất ít công ty có thể làm điều đó tốt hơn Automattic - công ty đứng sau Wordpress- nơi sở hữu khoảng 35% số trang web trên mạng Internet. Automattic - tại thời điểm viết bài - có 1.170 nhân viên nằm rải rác trên 75 quốc gia, nói 93 ngôn ngữ. Tự hào có mức định giá công ty là 3 tỷ đô la Mỹ, đã thực hiện một số thương vụ đáng chú ý như mua lại WooCommerce và nền tảng blog, Tumblr. Công ty này không có văn phòng, với các nhân viên hợp tác làm việc qua phương thức duy nhất là làm việc online. Matt MullenwegNgười sáng lập của Automattic, Matt Mullenweg (vì tên anh ta có 2 chữ “t”, nên tên công ty này cũng được nhân đôi số chữ “t” theo) gần đây đã xuất hiện trên kênh podcast Making Sense nổi tiếng của Sam Harris để nói về cái mà anh ta gọi là năm cấp độ của các nhóm phân tán (anh ta thích dùng từ “phân tán” thay vì “từ xa” vì cụm từ “từ xa”kia ngụ ý rằng vẫn còn một nơi làm việc tập trung.) Những ý kiến của Mullenweg thật đáng khích lệ (ít nhất là đối với tôi), tương tự như những gì tôi đã nói với nhiều khách hàng và đối tác của mình – “Các công cụ chỉ tốt tương đương với cách bạn sử dụng chúng”. Trên thực tế, lạm dụng các công cụ thực sự có thể khiến chúng ta giảm năng suất. Bên dưới là cách giải thích và diễn giải của tôi về những ý kiến của Mullenweg về năm cấp độ của làm việc từ xa.Năm cấp độ của các nhóm phân tán Cấp 1: Hành động không có chủ ýKhông có gì được công ty chủ ý thực hiện để hỗ trợ làm việc từ xa, tuy nhiên các nhân viên vẫn có thể tiếp tục một phần công việc nếu họ ở nhà trong một ngày. Họ có quyền truy cập vào điện thoại thông minh và email của mình. Có lẽ họ cũng sẽ tham gia vào một vài cuộc họp. Nhưng họ sẽ bỏ qua hầu hết mọi việc cho đến khi họ trở lại văn phòng, và sẽ lại trở thành một cái bóng của chính bản thân trong văn phòng. Cấp 1 là nơi mà phần lớn các tổ chức &amp; nhân viên đang làm việc trước khi có sự bùng phát của đại dịch COVID19. Cấp độ 2: Tái tạo lại văn phòng dưới hình thức trực tuyếnĐây là nơi hầu hết các tổ chức hiện đang cư trú trong dịch COVID19 - đặc biệt là những tổ chức truyền thống. Đây là nơi nhân viên của bạn có quyền truy cập vào phần mềm họp trực tuyến (ví dụ: Zoom), phần mềm nhắn tin (ví dụ: Slack) và email, nhưng thay vì thiết kế lại công việc để tận dụng các phương tiện mới này, cuối cùng các nhóm sẽ tạo lại cách họ làm việc trong văn phòng trước đây nhưng dưới hình thức trực tuyến. Điều này làm trầm trọng thêm nhiều thói quen xấu đã xâm nhập vào văn phòng hiện đại và ngăn chặn khả năng suy nghĩ của những người lao động tri thức - là khi bạn nhìn vào các cuộc gọi video 10 người trong khi chỉ cần hai người là đủ, hay hơn 60 lần gián đoạn mỗi ngày qua Slack và các cuộc gọi điện thoại, kiểm tra thông báo và trả lời email hơn 70 lần một ngày trong suốt cả ngày, hoặc là khả năng phản hồi nhanh được mong đợi đối với tất cả các nhân viên, khiến họ bị buộc dây với chiếc máy tính như một phản xạ có điều kiện. Mullenweg coi việc thiếu thiết kế lại công việc xung quanh các phương tiện mới tương tự như sự thiếu hiệu quả trong nhiều dự án chuyển đổi kỹ thuật số trị giá hàng triệu đô la, mà ở đó các quy trình thủ công bị lỗi và dư thừa được tạo ra trong những năm 1980 lại tiếp tục được số hóa một cách hiệu quả - nhưng chờ đã - chúng vẫn là các quy trình bị lỗi, và chúng bị dư thừa cơ mà? Ở cấp độ 2, mọi người vẫn được yêu cầu có mặt trực tuyến từ 9h sáng tới 5h chiều và nếu bạn ở cấp độ 2, bạn vẫn còn một chặng đường dài để đi. Cấp độ 3: Thích nghi với các công cụ mớiỞ cấp độ 3, các tổ chức bắt đầu thích nghi và tận dụng lợi thế của các công cụ mới. Mullenweg nói đến các tài liệu được chia sẻ (chẳng hạn như qua Google Doc), được nhìn thấy bởi tất cả mọi người và cập nhật liên tục theo thời gian thực trong suốt cuộc thảo luận, từ đó có được sự hiểu biết chung về những gì được thảo luận cũng như được quyết định, giúp loại bỏ nguy cơ bị lãng phí thời gian khi có sự hiểu nhầm về nội dung muốn truyền đạt. Ở giai đoạn này, các công ty cũng bắt đầu đầu tư vào các thiết bị tốt hơn cho nhân viên của mình, chẳng hạn như công cụ hỗ trợ cho các cuộc gọi video như webcam và micro chống ồn. Giao tiếp bằng văn bản hiệu quả trở nên cấp thiết khi các công ty muốn ủng hộ cho hình thức làm việc từ xa. Khó chịu với việc phải tham gia vào những cuộc gọi bất chợt, và ưu tiên cho giao tiếp bất đồng bộ (sẽ nói chi tiết hơn ở phần tiếp theo), hầu hết các giao tiếp tại Automattic dựa trên nền tảng văn bản, và do đó phối hợp ăn khớp một cách nhịp nhàng và đúng lúctrở thành yếu tố quyết định. Trên thực tế, Mullenweg chia sẻ rằng hầu hết các công việc tuyển dụng ở công ty ông được thực hiện qua văn bản thay vì các cuộc gọi điện thoại hoặc cuộc gọi video cho ứng viên. Khi nhắc đến các cuộc họp: Chỉ tổ chức một cuộc họp nếu điều đó là hoàn toàn cần thiết và không thể đạt được kết quả tương tự bằng hình thức cuộc trò chuyện nhanh, cuộc gọi điện thoại, email, văn bản hoặc tin nhắn. Giới hạn thời gian mặc định cho cuộc họp là 15 phút và chỉ kéo dài thời gian nếu thực sự cần thiết (cuộc họp càng ngắn, bạn sẽ càng phải trao đổi ngắn gọn và rõ ràng, hạn chế được thời gian nói chuyện lan man vô nghĩa). Đặt một lịch trình họp cụ thể và kết quả mong muốn trước khi thực hiện cuộc họp. Chỉ mời những người bắt buộc phải có (trừ khi là những quyết định lớn cần nhiều người tham gia, còn thường thì hai người sẽ đưa ra được quyết định trong khi ba người lại hiếm khi). Đồng ý về các bước triển khai tiếp theo, phân bổ người có trách nhiệm và đặt ngày đến hạn (điều này đặc biệt quan trọng để tránh các cuộc họp boomerang – họp xong mà như chưa họp). Không bao giờ, sử dụng một cuộc họp chỉ đơn giản là để truyền đạt thông tin - đó là những gì mà email hoặc tin nhắn được thiết kế để giải quyết. Nhiều người thực sự đang thấy rằng hầu hết các cuộc họp này thực tế có thể giải quyết qua email. Cấp độ 4: Giao tiếp bất đồng bộ“Tôi sẽ đụng tới nó lúc thích hợp.” - Đây là bản chất của giao tiếp bất đồng bộ. Thực tế là hầu hết mọi thứ khôngđòi hỏi phải phản ứng lại ngay lập tức. Đối với hầu hết mọi thứ chẳng hạn như thư điện tử hay tin nhắn tức thời nên thực hiện công việc của nó là truyền đạt thông tin, còn người nhận sẽ trả lời khi đến thời điểm phù hợp với họ. Nếu một cái gì đó thực sự khẩn cấp, thì phương thức giao tiếp sẽ phản ánh điều đó. Nhấc điện thoại, hoặc vỗ vai người muốn gọi - nhưng chỉ khi đó là việc thực sự khẩn cấp. Bên cạnh lợi ích rõ ràng và to lớn của việc dành cho những người lao động tri thức có thời gian suy nghĩ, sáng tạo và đi vào trạng thái dòng chảy(một trạng thái tâm lý theo đó chúng ta có năng suất cao hơn năm lầntheo McKinsey), giao tiếp bất đồng bộ còn khiến mọi người đưa ra quyết định tốt hơn. Như Robert Greene nói: nếu bạn muốn cắt cảm xúc ra khỏi phương trình, hãy tăng thời gian phản hồi của bạn. Cho mọi người thời gian để suy nghĩ giữa câu hỏi và câu trả lời, thay vì trở thành nạn nhân của việc luôn phải thốt ra điều đầu tiên xuất hiệntrong đầu ở các cuộc họp hay khi bị vỗ vai, sẽ mang lại lợi ích chung cho tổ chức về lâu dài. Để tránh việc chuyền qua chuyền lại cũng như mất nhiều thời gian trao đổi, hãy chắc chắn rằng các thông điệp bất đồng bộ luôn đảm bảo: Cung cấp đầy đủ và chi tiết bối cảnh của tình huống, cũng như cung cấp các hành động cần thiết một cách rõ ràng đi kèm với các kết quả mong muốn. Cung cấp thông tin về ngày cần hoàn thành. Cung cấp cách thức liên hệ trong trường hợp người nhận cần thêm thông tin hoặc không thể đáp ứng yêu cầu của bạn. Ví dụ: “Chào An, Kèm theo là tài liệu hợp nhất cho công ty mới được tách ra từ công ty hiện tại của chúng tôi. Vui lòng ký vào tài liệu khi được yêu cầu và gửi lại cho tôi trước 4 giờ chiều thứ Sáu tuần này. Nếu bạn có bất kỳ mối quan tâm nào, hãy gọi cho tôi vào số 555 1983.” Các công ty thực sự thực hiện giao tiếp bất đồng bộ đã vượt qua cuộc cách mạng công nghiệp, và không còn giới thiệu sự hiện diện của mình thông quanăng suất, hoặc sản lượng hàng giờ, như các nhà máy hiện tại đang làm. Mullenweg chỉ ra rằng các đội phân tán toàn cầu, những người làm việc bất đồng bộ và thành thạo với cách làm việc kiểu chạy tiếp sức, có thể hoàn thành lượng việc cao gấp ba lần so với một nhóm làm việc với các thành viên ở trong văn phòng từ 9 giờ sáng đến 5 giờ chiều. Đánh thức con cú đêm trong bạn Một yếu tố chưa được bàn tới trong các cuộc trao đổi đó là nhịp sinh học. Khoa học cho thấy các mô hình ngủ phổ biến của chúng ta - các kiểu nhịp sinh học - được lập trình từ khi sinh. Mọi người hoặc là cú đêm hoặc sẽ là chim sâu buổi sớm. Nhà vật lý thiên văn Sabrina Stierwalt đã viết cho Science American rằng: Sở thích của chúng ta đối với cái này hay cái khác được mã hóa trong các gen được gọi là gen “đồng hồ” hoặc gen “chu kỳ” qua đó điều chỉnh nhịp sinh học của chúng ta, và liên quan trực tiếp đến huyết áp, sự trao đổi chất, nhiệt độ cơ thể cũng như mức độ hormone. Một số nghiên cứu đã phát hiện ra rằng khoảng 30 đến 40% dân số là những con cú đêm, điều đó có nghĩa là ngày làm việc 9h đến 5hhiện đại đang phá hoại những nỗ lực sáng tạo và trí tuệ của gần một nửa lực lượng lao động. Stierwalt nói rằng ngày làm việc thường bắt đầu từ 7 đến 9 giờ sáng. Tuy nhiên, những con cú đêm có thể gặp hiện tượng “lệch múi giờ do tác động xã hội” nếu họthức dậy sớm thế này - nghĩa là, họ có thể cảm thấy hiện tượng tương tự như hiện tượng chúng ta đã gặp sau một chuyến bay qua đêm. Những người dậy sớm thường ít gặp phải tình trạng lệch múi giờ này, điều này giúp họ có lợi thế hơn những con cú đêm. Các nghiên cứu cho thấy rằng trong khi những người dậy sớm tỉnh táo hơn vào buổi sáng, thì cú đêm cho thấy sự tập trung mạnh mẽ hơn và sự chú ý kéo dài hơn 10 giờ sau khi thức dậy so với đồng loại “chim sâu buổi sớm” của họ. Các công ty bất đồng bộ cung cấp cho cú đêm sự linh hoạt trong việc bắt đầu ngày làm việc mới muộn hơn, miễn là phải đảm bảo có những khoảng thời gian mà họ và đồng nghiệp khác cùng làm việc với nhau. “Và như Mullenweg chia sẻ: Công ty Automattic đang ở cấp 4 Cấp 5: Niết Bàn (Nirvana)Đây là nơi nhóm phân tán của bạn hoạt động tốt hơn bất kỳ nhóm làm việc trực tiếp tại chỗ nào từng có thể. Mullenweg đánh đồng mức độ này với việc nhấn mạnh hơn vào thiết kế môi trường, trong đó luôn có sự quan tâm đến văn hóa tổ chức, và môi trường vật lý mà mọi người đang làm việc. Nhược điểm Tất nhiên, có những ưu và nhược điểm với hầu hết các quyết định. Có thể tìm thấy ba nhược điểm hoặc mối lo ngại lớn đối với các đội mới làm việc từ xa và cách đối phó với chúng dưới đây:Liên kết đội và xây dựng Thay vì nói với nhân viên của họ ở văn phòng 11 tháng một năm và được nghỉ 4 tuần, Automattic lật ngược lại kịch bản này: “Nhân viên có 11 tháng làm việc từ xa một năm và phải dành thời gian để đi lại tới 4 tuần một năm cho các sự kiện gắn kết và xây dựng đội nhóm.” Họ cũng sử dụng các ứng dụng được xây dựng tùy chỉnh để theo dõi ai đã gặp ai, và sau đó chỉ định chỗ ngồi, nói tại một bữa tiệc tối, để mọi người ngồi với những người mà họ chưa gặp trước đó. Sự thấu hiểu và giao tiếp trong văn phòng Với tất cả mọi người làm việc trực tuyến, bạn bỏ lỡ các cuộc trò chuyện tán gẫu khi chạm mặt nhau ở quầy ăn/cây lấy nước, hay tình cờ nghe thấy người khác nói về điều mà bạn có thể giúp đỡ, hoặc có ngay nhận thức chung về các hoạt động của nhóm nhờ việc lắng nghe từ xa những cuộc trao đổi.Để giải quyết sự thiếu hụt này, Automattic sử dụng một plugin Wordpress có tên P2, hoạt động như một blog nội bộ và là nơi có một số lượng đáng kể các cuộc trò chuyện và hoạt động được ghi lại. Sự an toàn Mullenweg nói đến sự an toàn với phương thức bảo mật đầu cuối sử dụng trong hình thức BYOD – sử dụng thiết bị cá nhân như máy tính xách tay và điện thoại thông minh. Tuy nhiên, thay vì nhấn mạnh hay tập trung quá mức đến sự kiểm soát truy cập, chúng ta cần được bảo vệ để chống lại các hành vi độc hại. Với hơn 70% các vụ hack CNTT sử dụng kỹ thuật Social Engineering – kỹ thuật thao túng hành vi con người để xâm nhập vào bên trong thay vị tập trung khai thác các lỗ hổng bảo mật của máy móc, thiết bị. “Hiện tại, làm việc tại nhà là một đặc quyền và nó không phải là quyền của nhiều người, vì vậy chúng ta hãy chú ý hơn về cách thức mình làm việc, hãy chứng minh rằng chúng ta có thể làm việc hiệu quả hơn so với làm việc tại văn phòng qua đó chúng ta sẽ được cho phép làm việc từ bất cứ nơi nào chúng ta muốn thường xuyên hơn.”","link":"/gratuit-blog/2020/04/07/work-from-home/"}],"tags":[{"name":"retail","slug":"retail","link":"/gratuit-blog/tags/retail/"},{"name":"e-commerce","slug":"e-commerce","link":"/gratuit-blog/tags/e-commerce/"},{"name":"guideline","slug":"guideline","link":"/gratuit-blog/tags/guideline/"},{"name":"software","slug":"software","link":"/gratuit-blog/tags/software/"},{"name":"principle","slug":"principle","link":"/gratuit-blog/tags/principle/"},{"name":"production","slug":"production","link":"/gratuit-blog/tags/production/"},{"name":"clean-code","slug":"clean-code","link":"/gratuit-blog/tags/clean-code/"},{"name":"tips","slug":"tips","link":"/gratuit-blog/tags/tips/"},{"name":"soft-skill","slug":"soft-skill","link":"/gratuit-blog/tags/soft-skill/"}],"categories":[{"name":"retail","slug":"retail","link":"/gratuit-blog/categories/retail/"},{"name":"software","slug":"software","link":"/gratuit-blog/categories/software/"},{"name":"work-skill","slug":"work-skill","link":"/gratuit-blog/categories/work-skill/"}]}