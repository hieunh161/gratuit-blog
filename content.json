{"pages":[],"posts":[{"title":"Guide to wirte post in blog","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/gratuit-blog/2020/04/05/guide-to-wirte-markdown/"},{"title":"Các định luật phần mềm – Phần 3","text":"Định luật KerckhoffsTrong lĩnh vực mã hóa có một định luật được phát biểu bởi Auguste Kerkhoffs nói rằng: In cryptography, a system should be secure even if everything about the system, except for a small piece of information — the key — is public knowledge.Một hệ thống phải được an toàn ngay cả khi kẻ thù biết được tất cả mọi thứ về hệ thống trừ một thứ đó là key mã hóa. Định luật này xuất phát từ thế kỷ 19 và nó dường là tiền đề cho mọi phát minh về mã hóa sau này. Trong thế chiến thứ 2 khi mà hoạt động tình báo trở nên vô cùng phổ biến và cuộc chiến về mã hóa đã cho ra đời hàng trăm phát minh mới về mã hóa trong thời gian này thì định luật này được xem như là cơ sở. Và hiện nay với các mã hóa hiện đại càng thể hiện sự đúng đắn của định luật này. Định luật Reed The utility of large networks, particularly social networks, scales exponentially with the size of the network.Độ mở rộng của các mạng xã hội tỉ lệ với hàm số mũ Được phát biểu bởi David Reed nói về mức độ phát triển của một mạng lớn, đặc biệt là mạng xã hội. Lý do tại sao lại là hàm số mũ mà ko phải hàm bình phương là vì số nhóm con của một mạng xã hội có N thành viên sẽ là 2^N − N − 1, nó tăng nhanh hơn rất nhiều so với số lượng connection chỉ là N(N-1) (Định luật Metcalfe) Định luật ZawinskiĐịnh luật nói về độ mở rộng của một phần mềm Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can.Tất cả các chương trình sẽ được mở rộng cho tới khi nó đọc được mail, những chương trình ko đạt được điều đó sẽ được thay thế bởi chương trình có thể làm được. Nó nói lên mức độ phổ biến và sự quan trọng của mail trong hệ thống thông tin. Hầu như ngày nay tất cả các chương trình đều liên kết tới email, không có chương trình nào mà ko sử dụng địa chỉ email để đăng ký cả. Hiện nay có một dị biến nói thêm về RSS nhưng ko phổ biến. Hiện tại email vẫn là số 1 trong tất cả các hệ thống. Định luật ConwayMột định luật vô cùng quan trọng thể hiện sự phản ánh cấu trúc của phần mềm Any piece of software reflects the organizational structure that produced itBất kỳ phần nào của phần mềm cũng phản ánh cấu trúc đã tạo ra nó Đây là định luật được Conway đưa ra vào năm 1968 về cấu trúc hệ thống phần mềm. Nó cho phép bạn có thể hiểu được cách thức, cấu tạo của hệ thống khi biết được một phần của phần mềm. Nó là hệ quả của việc nhiều người cùng làm trong cùng một hệ thống. Giả sử A và B làm 2 modul 1 và 2 thì để 1 và 2 kết nối được với nhau thì A và B phải tạo ra interface để các module ấy có thể nói chuyện được với nhau. Hoặc giả sử A làm một module và nếu B muốn dùng module đó thì trong OO B thường sẽ extend module của A vì sợ làm ảnh hưởng tới code của A, tuy nhiên nếu A thêm chức năng có thể A sẽ sửa trực tiếp module chứ ko phải extend nó. Đó chính là ý mà conway muốn nói đến trong định luật này. Định luật FittĐây là định luật về độ usability của hệ thống. Time = a + b log2 ( D / S + 1 ) phát biểu bằng lời như sau The time to acquire a target is a function of the distance to and the size of the target.Thời gian để đạt được một mục tiêu là hàm phụ thuộc vào khoảng cách và kích thước của mục tiêu Nó ảnh hưởng rất lớn đến các nhà thiết kế. Kể ra thiết kế các module để reuse trong phần mềm hay là thiết kế giao diện. Ví dụ như việc đặt menu ở góc trái bên dưới là vị trí sẽ tốn thời gian nhất. Vì khoảng cách xa và diện tích bé. Dấn tới sẽ tốn thời gian để bạn có thể thao tác với menu. Ngược lại nếu bạn muốn module nào dễ thao tác, bạn có thể làm diện tích to và đặt ở trung tâm. Định luật này hầu hết các designer đều rất thông thạo. Định luật HickĐịnh luật liên quan tới thời gian đưa ra quyết định cho bạn, được phát biểu như sau. The time to make a decision is a function of the possible choices he or she has.Thời gian đưa ra quyết định sẽ là một hàm phụ thuộc các khả năng lựa chọn mà bạn cóTime = b log2(n + 1) Thời gian sẽ phụ thuộc vào hàm số log cơ số 2. Tại sao lại là log cơ số 2 thì đó chính là do cơ chế não của chúng ta phân tích theo nhị phân. Thường thì chúng ta sẽ làm theo cơ chế loại bỏ. Và chính vì thế có công thức trên. Áp dụng công thức này bạn cũng có thể tính được thời gian để não nhận ra đáp án cho câu hỏi chắc nghiệm. Giả sử đề thi của bạn có 4 câu trả lời khả dĩ. Bạn mất 2 giây để đọc hiểu câu hỏi, thời gian não bạn đưa ra quyết định dựa trên một sự kiện là 0.1s. (Chú ý đây là thời gian não phản ứng. Thông thường khi có tai nạn chẳng hạn, thời gian để não đưa ra phản ứng sau khi nhận biết có sự kiện cũng khoảng 0.1s) và đưa vào công thức bạn sẽ có thời gian để bạn biết câu trả lời của câu hỏi là 2.35s. Và nó cũng có thể mở rộng ra với việc đưa ra quyết định của một nhóm bạn. Tuy nhiên hệ số sẽ khác. Bạn thử áp dụng vào thực tế khi cả nhóm bạn quyết định trưa nay đi ăn ở đâu thử xem. Cũng là một việc thú vị đấy chứ. Định luật Occam RazorĐịnh luật phát biểu rằng The explanation of any phenomenon should make as few assumptions as possibleSự giải thích cho bất kỳ hiện tượng nào nên đơn giản nhất có thể.Định luật này nhấn mạnh rằng cách giải thích nào đơn giản nhất thường là cái đúng. Các nhà thám tử dùng định luật này để loại bỏ dần các đối tượng tình nghi, các bác sĩ dùng định luật này để tìm ra nguyên nhân bệnh dựa trên một tập các triệu chứng. Bạn có thể xem thêm ở đây để hiểu thêm về định luật này. Ngoài các định luật đã nêu còn rất nhiều định luật khác nữa bạn có thể tham khảo ở wiki. Nó bao gồm rất nhiều định luật từ vật lý , toán học, hóa học, sinh học …. khác nữa.","link":"/gratuit-blog/2020/04/05/software-principle-3/"},{"title":"12 vue best-practise for better code","text":"Luôn dùng :key bên trong v-forSử dụng thuộc tính :key với v-for giúp ứng dụng ổn định và có thể dự đoán được bất cứ khi nào chúng ta muốn thao tác dữ liệu.Điều này giúp Vue có thể theo dõi trạng thái của các item cũng như có một tham chiếu liên tục đến các thành phần. Một ví dụ trong đó các :key cực kỳ hữu ích là khi sử dụng hình động Animation hoặc Vue transitions.Không có key, Vue sẽ chỉ cố gắng làm cho DOM hiệu quả nhất có thể. Điều này có thể có nghĩa là các yếu tố trong v-for có thể xuất hiện không theo thứ tự hoặc hành vi mà chúng ta mong muốn, cũng như khó dự đoán hơn. Nếu chúng ta có một tham chiếu khóa duy nhất cho từng thành phần, thì chúng ta có thể dự đoán tốt hơn cách ứng dụng Vue của chúng ta sẽ xử lý thao tác DOM. 12345&lt;!-- BAD --&gt;&lt;div v-for='product in products'&gt; &lt;/div&gt;&lt;!-- GOOD! --&gt;&lt;div v-for='product in products' :key='product.id'&gt; Dùng kebab cho các EventSử dụng kebab cho các sự kiện custom. 123this.$emit('close-window')// then in the parent&lt;popup-window @close-window='handleEvent()' /&gt; Khai báo Props với camelCase, và dùng Kebab Case trong các templateBest practise này là do thống nhất với cú pháp của 2 ngôn ngữ html và javascript. Trong javascript thì camelCase là chuẩn còn trong html thì là kebab. 1234567BAD!&lt;PopupWindow titleText='hello world' /&gt; props: { 'title-text': String }GOOD!&lt;PopupWindow title-text='hello world' /&gt; props: { titleText: String } Data luôn luôn trả về functionKhi để trả về object thì data sẽ được share trong tất cả các instance của component này. Tuy nhiên mục đích luôn là tạo ra các component tái sử dụng được (reusable) do đó nên trả về function trong đó có chưa object data. 12345678910111213BAD!data: { name: 'My Window', articles: []}GOOD!data () { return { name: 'My Window', articles: [] }} Không dùng v-if với các yếu tố của v-forThông thường đôi khi chúng ta sẽ code cả v-if bên trong v-for như dưới. 12BAD!&lt;div v-for='product in products' v-if='product.price &lt; 500'&gt; Reference: https://medium.com/js-dojo/vuejs-tips-best-practices-39d9962bb255","link":"/gratuit-blog/2020/04/05/vue-tips-1/"},{"title":"software-principle-1","text":"Mở đầuTrong các lĩnh vực tự nhiên, các nhà khoa học đã tìm ra rất nhiều định luật, quy luật của tự nhiên và đã trở thành những kiến thức nền tảng trong xã hội. Nó giúp chúng ta hiểu rõ, giải thích được các hiện tượng một cách thấu đáo hơn. Trong lĩnh vực phần mềm, dù nó khác so với một lĩnh vực khoa học, song trong thời gian ngắn xuất hiện của mình, nó cũng đã được rất nhiều nhà nghiên cứu tìm ra được những quy luật và họ đã phát biểu thành các định luật mang tên mình. Hiểu rõ được các định luật chi phối trong ngành phần mềm không chỉ giúp chúng ta hiểu hơn công việc mà còn giúp chúng ta thay đổi xử lý các vấn đề tốt hơn. Định luật PostelĐịnh luật Postel hay còn gọi là định luật về độ ổn định của một hệ thống (Robustness law) được đặt tên theo nhà khoa học Postel là người tiên phong trong lĩnh vực phát triển nền tảng internet. Ông phát biểu định luật này khi viết đặc tả cho giao thức TCP (transmission control protocol) nổi tiếng. Be conservative in what you send, liberal in what you acceptHãy tuân thủ chặt chẽ những gì bạn gửi đi, tự do với những gì bạn chấp nhận Nói theo một cách khác, code viết trong các chương trình khi gửi lệnh hoặc dữ liệu tới chương trình khác, hoặc module khác của chương trình nên tuân thủ chặt chẽ các đặc tả, tuy nhiên code khi nhận dữ liệu thì phải làm sao nó có thể chấp nhận được cả các dữ liệu không tuân thủ cấu trúc, hoặc ý nghĩa không rõ ràng. Thực tế thì bạn gặp rất nhiều trường hợp liên quan tới định luật Postel như code check lỗi input và handle exception… trong phần mềm. Định luật Parkingson Work expands so as to fill the time available for its completionCông việc luôn tự mở rộng ra để chiếm đủ thời gian được ấn định cho nó Định luật này được C. Northcote Parkinson, nhà văn và sử học người Anh đưa ra. Nó không chỉ dành cho lĩnh vực phần mềm nói riêng mà nó mở rộng cho tất cả các lĩnh vực khác. Ý nghĩa của nó là khi bạn dự định làm một công việc gì đó trong một khoảng thời gian lớn hơn so với thời gian nó có thể hoàn thành thì bản thân công việc sẽ mở rộng ra để chiếm nốt phần thời gian thừa của bạn. Ví dụ như công việc này bạn dự định làm trong 1 tuần, tuy nhiên thực tế thì có thể hoàn thành công việc trong 3 ngày. Vậy khi làm công việc thì nó sẽ phát sinh những việc để chiếm hết 1 tuần của bạn. Định luật này vô cùng quan trọng đối với các nhà quản lý. Hiểu rõ định luật này sẽ giúp các nhà quản lý hoạch định để tăng productivity của nhân viên, cũng như sử dụng thời gian rảnh rỗi một cách hợp lý. Và nó cũng dẫn tới một kiểu quản lý mới đó là các nhà quản lý cố gắng chia nhỏ công việc ra nhỏ nhất có thể để hạn chế tối đa ảnh hưởng của định luật Parkingson. Thường thì có thể là trong 1 ngày. Bạn có thể tự kiểm nghiệm với bản thân mình, thường những cách mà nhân viên áp dụng định luật parkingson là họ cố gắng nghĩ ra những việc không quan trọng để lấp đầy thời gian rảnh rỗi, như sắp xếp giấy tờ, pha cà phê … hoặc những công việc có productivity bằng 0. Định luật này còn áp dụng trong lĩnh vực quản lý tiền bạc với phát biểu sau: Expenditures rise to meet income.Các khoản chi tiêu sẽ tăng lên cho đến khi nó bằng với thu nhập. Nghĩa là nếu bạn ko có kế hoạch tích lũy, quản lý hợp lý tiền bạc thì cho dù thu nhập bạn tăng lên bạn cũng ko có hi vọng gì vào việc có tiền thừa cả, mà sẽ có các khoản chi phí khác phát sinh cho đến khi số tiền bằng với số tiền bạn kiếm được. Với sinh viên và nhân viên trẻ thì điều này thấy rất rõ ràng. Hiểu được định luật parkingson có thể giúp bạn biến nó thành lợi thế cho mình với các định hướng trước như dừng việc dành hàng giờ đồng hồ vào việc làm gì đấy, hãy cố gắng hoàn thành mọi việc càng sớm càng tốt và tận hưởng thời gian rỗi rãi còn lại. Định luật ParetoCòn được biết với định luật vô cùng nổi tiếng 80-20, hay là quy luật thiểu số quan trọng, phân bố nhân tố, nó được phát biểu như sau: For many phenomena, 80% of consequences stem from 20% of the causes.Với rất nhiều hiện tượng, thì 80% kết quả là do 20% nguyên nhân gây ra Nó được đặt tên theo nhà kinh tế người Ý Vilffedo Pareto với công trình đầu tiên về quan sát 80% đất đai ở Ý là thuộc 20% dân số, và sau đó được các nhà nghiên cứu khác áp dụng rộng rãi trong tất cả các hiện tượng trong xã hội. Trong lĩnh vực phần mềm chúng ta có thể hiểu theo một số cách rất quan trọng như sau. 80% khối lượng công việc sẽ do 20% số người làm ra. Hay 80% bugs sẽ đến từ 20% số dòng code… hoặc là 80% khối lượng công việc khó nhất sẽ nằm trong thời gian 20% cuối cùng. Hay đơn giản là 20% sếp sẽ nhận thu nhập bằng 80% chẳng hạn. Trước kia có một lần nói chuyện với một sếp cũ thì có biết là chính sách công ty cũng sẽ là giữ 20% key còn lại thì không quan tâm lắm. Nên dù sao việc của bạn khi hiểu được quy luật này là hãy phấn đấu để trở thành 20% quan trọng nhất ở bất kỳ vị trí nào. :) quy luật này dù hiện hữu ở rất nhiều lĩnh vực nhưng vấn đề của nó là không phải lúc nào bạn cũng biết được cái nào là 20%. Định luật PeterNăm 1968 trong cuốn sách “The peter principle” Dr. Laurence J. Peter đã đưa ra định luật phát biểu rằng: “In a hierarchy every employee tends to rise to his level of incompetence.”Trong mô hình phân cấp, các nhân viên sẽ có xu hướng vươn lên tới các vị trí mà năng lực anh ta không đáp ứng được. Theo như định luật này thì một lúc nào đó, cuối cùng một nhân viên sẽ vươn tới được vị trí mà tất cả khả năng tốt nhất của anh ta được phát huy. Và những vị trí cao hơn thì năng lực của anh ta không còn phù hợp và đáp ứng được nữa. Hoặc nó còn có thể hiểu là dù anh ta còn khả năng nhưng anh ta không còn rèn luyện những kỹ năng để đáp ứng vị trí công việc nữa. Với những công ty phát triển nhanh đột biến thì hiện tượng này xảy ra rất nhiều. khi các sếp hi vọng các nhân viên xuất sắc ở cấp dưới có thể đảm nhiệm tốt các công việc phía trên vì khả năng của họ. Ví dụ những người có năng lực kỹ thuật tốt thường sẽ đảm nhiệm việc quản lý khi cty phát triển. Tất nhiên có nhiều người có khả năng phù hợp, nhưng cũng có những người không thể đáp ứng được. Trong quản trị nhân sự cấp cao, điều này đặc biệt quan trọng. Với quản trị nhân sự chung trong toàn công ty lớn, hiện nay họ cũng cố gắng hạn chế nhất có thể việc “ngồi nhầm chỗ” này khi đánh giá đúng được năng lực nhân viên. Định luật HofstadterĐịnh luật này là một phần của cuốn sách An Eternal Golden Braid của Douglas Hofstadter xuất bản năm 1979. Định luật này đặc biệt đúng, ngay cả áp dụng vào thời gian tôi dành để viết bài blog này. Thời gian để viết xong nó tốn nhiều hơn những gì tôi đã mong muốn. Định luật này phát biểu rằng: It always takes longer than you expect, even when you take into account Hofstadter’s Law.Một nhiệm vụ thường tốn nhiều thời gian hơn bạn mong muốn, ngay cả khi bạn biết và hiểu định luật này. Định luật này được giới thiệu lần đầu tiên liên quan tới vấn đề cuộc chiến cờ giữa máy tính và người khi mà các kỳ thủ hàng đầu đã liên tục đánh thắng máy ngay cả khi máy tính tính toán trước được rất nhiều nước đi của các kỳ thủ. Hofstadter đã viết : “Trong những ngày đầu của cờ máy, người ta đã estimate rằng sẽ mất 10 năm để biến cờ máy thành vô địch, không có đối thủ. Nhưng sau khi 10 năm trôi qua, có vẻ như ngày mà cờ máy thành vô địch sẽ phải mất thêm 10 năm nữa.” Và ông ấy lấy đó như là một luận cứ để hình thành nên định luật của mình. Trong lĩnh vực phần mềm bạn có thể hiểu là thông thường thời gian thực hiện xong một task, module sẽ thường dài hơn bạn đã ước lượng và mong muốn. Định luật này được đề cập và nhắc đến rất nhiều trong các programmers. Trong các cuốn về tăng hiệu suất công việc như The mythical of man-month hay extreme programming vấn đề này cũng được thảo luận rất nhiều. Định luật này phản ánh sự phức tạp trong vấn đề estimate ngay cả với những người có kinh nghiệm. To be continue.","link":"/gratuit-blog/2020/04/05/software-principle-1/"},{"title":"Các định luật phần mềm – Phần 2","text":"Định luật murphyMột định luật vô cùng nổi tiếng khác mà có lẽ tất cả mọi người đều biết, nhưng không phải ai cũng hiểu rõ về nó đó chính là định luật murphy. Được phát biểu như sau: If anything can go wrong, it will.Nếu một việc có thể diễn tiến xấu, nó sẽ diễn tiến đúng như thế Định luật này còn được gọi là Định luật bánh bơ và được được nhận giải IG nobel vào năm 2003. Nó được chuyên gia tên lửa A. Murphy phát biểu vào năm 1949 . Nó nguồn gốc từ một nghiên cứu của không quân Mỹ về tác dụng của quá trình giảm tốc nhanh trên các phi công. Người tình nguyện bị buộc trong xe trượt tuyết gắn động cơ phản lực, và phản ứng của họ khi xe dừng đột ngột sẽ được ghi lại nhờ hệ thống điện cực gắn khít vào bộ ghế ngồi do đại úy Edward A. Murphy thiết kế. Tuy nhiên, Murphy đã không ghi được số liệu nào sau một thử nghiệm tưởng chừng không có sai sót. Thì ra, một điện cực bị mắc sai. Sai lầm hy hữu này khiến Murphy phải thốt lên: “Nếu trong nhiều cách có một cách sai – sẽ có người thực hiện cách sai đó”. Đã bao giờ bạn đi ra đường, đến công ty và gặp cảnh tắc đường, bạn thấy như thế và quyết định rằng sẽ chọn một con đường vòng mà có khả năng nhanh hơn, tuy nhiên vẫn lo ngại rằng có thể nó cũng bị tắc, và thực tế rằng con đường mới bạn chọn cũng tắc khiến bạn có thể còn chậm hơn. Hoặc có rất nhiều lần những điều bạn lo sợ đã xảy ra. Tôi tin rằng điều đó với ai cũng có. Có nhiều người cho rằng đó là định luật chi phối mọi thứ. Vậy liệu nó có bí ẩn gì đằng sau không. Và có rất nhiều người sau khi trải qua một vài điều như thế bắt đầu tin vào số mệnh. Vậy sự thật là gì? Chúng ta sẽ nhìn định luật murphy dưới con mắt của các nhà khoa học như sau: Sau một nghiên cứu và cố gắng định lượng phương trình murphy, joel pel đã đưa ra phương trình như trên. Trong đó: PM là khả năng murphy mà một điều gì đó sẽ không đúng. KM là hằng số murphy, nó là một hằng số bằng 1. FM là hệ số murphy, nó là một số rất nhỏ, nhưng chúng ta có làm tròn xấp xỉ nó bằng 0.01. Các hệ sô I,C,U,F là các biến có thang đo từ 1-10 để miêu tả về sự kiện. Trong đó, I là độ quan trọng của kết quả hoặc kết quả sự kiện, C là độ phức tạp của hệ thống, U là mực độ khẩn cấp của hệ thống. F là mức độ thường xuyên sử dụng hệ thống. Từ 4 biến đó mà bất kỳ sự kiện nào cũng có thể mô tả được. Và với các giá trị đã cho bạn có thể tự tính được khả năng mà một sự việc có thể không đúng. Trong lĩnh vực phần mềm, định luật murphy ảnh hưởng nhiều nhất trong các phase : project planning, performance management, progress management, risk assesment … và nếu bạn nghĩ rằng nó chỉ có thể xảy ra ở những bước trên thì nó sẽ sai ở một bước khác nữa. Ý nghĩa của định luật murphy chính là những hiểm họa sẽ xảy ra ngay cả khi bạn không tiên đoán được. Để kết thúc về định luật murphy chúng ta sẽ thử áp dụng công thức murphy vào một số ví dụ minh họa sau: Giả sử bạn đang code cho một module của hệ thống, module này là một module rất quan trọng, vì nó được gọi bởi rất nhiều module khác (ví dụ như thao tác với dữ liệu bao gồm CRUD chẳng hạn, hoặc gì đó tùy bạn), và vì thế mà nó rất thường xuyên được gọi trong hệ thống của bạn. Vậy chúng ta thử đánh giá xem, khả năng module này của bạn code liệu có thể có xảy ra lỗi khi đưa vào sử dụng hay không. Độ quan trọng của hệ thống ta cho I = 9 (1 là thấp nhất, 10 cao nhất), module này giả sử tuy quan trọng nhưng ko đến nỗi quá phức tạp, ta cho là 5, và nó cần hoạt động trước khi các module khác hoạt động, ví dụ như bạn phải insert thì mới xử lý và trả kết quả về được, nên ta cho nó là 8, và cuối cùng nó rất hay được gọi nên độ thường xuyên là 9. Vậy áp dụng các công thức trên thì xác suất murphy sẽ là gần bằng 1. Nghĩa là chắc chắn sẽ có lỗi xảy ra với module của bạn khi đưa vào hoạt động, hoặc trong các điều kiện xấu. Tương tự như thế, bạn có thể tự điều chỉnh dữ liệu và sự kiện để có thể áp dụng vào các trường hợp khác. Trong lập trình có một trường phái lập trình để chống lại định luật murphy đó chính là lập trình phòng thủ. Ai có thời gian có thể tìm hiểu thêm. Định luật Brook Adding manpower to a late software project makes it later.Nếu thêm người vào một dự án chậm sẽ làm nó chậm hơn Nó được Brook là một quản trị dự án lâu năm ở IBM đúc kết ra sau rất nhiều dự án ông đã làm ở IBM, và được viết trong cuốn sách cũng vô cùng nổi tiếng The mythical man-month xuất bản năm 1975. Giờ đây định luật này nằm trong hầu hết các cuốn sách về quản trị lớn bé trên thế giới về phát triển phần mềm. Ông còn phát biểu nó dưới dạng một câu nói khác vô cùng hài hước: The bearing of a child takes nine months, no matter how many women are assigned.Không có cách nào để 9 bà mẹ có thể sinh ra một đứa trẻ trong 1 tháng. Có 2 điểm dùng để giải thích cho định luật brook trong phát triển phần mềm đó là: Sẽ mất một thời gian nhất định để người thêm vào dự án có thể quen với công việc. Dự án phần mềm là một công việc phức tạp, nhất là những dự án khó về mặt business, và những người mới thường phải đầu tiên là được đào tạo để làm quen với nó. Việc đào tạo này cũng yêu cầu tài nguyên từ dự án, như yêu cầu PM hoặc những người có kinh nghiệm đào tạo. Chính việc này đến lượt nó lại làm mất năng suất làm việc của những người có kinh nghiệm nó trên vì họ tốn thời gian vào đào tạo. Ngoài ra những người mới có thể còn làm tiến độ chậm đi khi họ có khả năng tạo ra các bugs mới cho hệ thống. Thứ 2 là sự tăng nhanh về kênh giao tiếp giữa các thành viên. Số kênh giao tiếp khác nhau có thể tăng nhanh với số người tham gia. Nó khiến cho công việc khó có thể được đồng bộ, và có thể chồng chéo, làm chậm trễ hơn. Tuy nhiên cũng có một số điểm có thể xem xét khi thêm người, đó là thêm vào giai đoạn sớm của dự án hoặc người thêm vào thực sự có kinh nghiệm, có khả năng. Định luật LinusĐược đặt tên theo Linus Torvalds người đã phát triển hệ điều hành linux, được phát biểu như sau: Given enough eyeballs, all bugs are shallowNếu có đủ số lượng người , thì số lượng bugs sẽ giảm đi. Linus là một trong những thiên tài trong phần mềm, ông đã phát triển nền tảng cho linux và đưa open code cho tất cả lập trình viên trên thế giới phát triển nó, chỉnh sửa và thêm vào. Tốc độ của hệ thống nhân linux ngày càng nhanh cùng với số lượng người tham gia phát triển nó. Enough eyeballs ở đây thể hiện cho số người làm việc và tham gia giải quyết vấn đề. Một phát biểu thông thường hơn của định luật linus là : Với một lượng đủ lớn các lập trình viên và các tester, hầu hết tất cả các vấn đề sẽ được xác định và sửa một cách nhanh chóng và dễ dàng. Định luật moore The power of computers per unit cost doubles every 24 month.Khả năng xử lý của máy tính trên mỗi đơn vị sẽ tăng gấp đôi sau mỗi 2 năm Hay Số lượng Transitor trên mỗi đơn vị inch vuông sẽ tăng lên gấp đôi sau mỗi năm Một định luật nổi tiếng khác mà hầu như ai cũng từng nghe đến, Định luật Moore lần đầu tiên được công bố rộng rãi trên tạp chí Electronics Magazine số ra ngày19/4/1965. Định luật Moore là một bước ngoặt lớn trong ngành công nghệ điện tử, giải thích tại sao nhà sản xuất có thể giảm giá thành trong khi vẫn tiếp tục nâng cao hiệu suất của phần cứng. Tuy nhiên, trong thời gian gần đây định luật Moore đã có nhiều biểu hiện bị thay đổi và kéo dài dần thời gian tăng đôi số transtior trên một đơn vị diện tích (một inch vuông). Tại thời điểm hiện nay (năm 2007), khoảng thời gian để tăng đôi số transistor là xấp xỉ 60 tháng. Nhiều nhà phân tích cho rằng trong tương lai không xa khi mà các áp dụng kỹ thuật đã không thể rút nhỏ kích cở của một transistor xuống hơn được (cụ thể là khi kiến trúc của transistor đã được rút xuống đến mức độ phân tử) thì định luật Moore sẽ không còn đúng nữa. Tuy nhiên với khoảng thời gian dài liên tục phát triển của mình, thì những thành tựu rực rỡ của ngành công nghiệp điện tử đã góp phần xây dựng rất nhiều thần kỳ trong thế kỷ vừa qua. Định luật WirthNăm 1995 Niklaus Wirth đưa ra định luật mang tên ông như sau: software is getting slower more rapidly than hardware becomes faster.Phần mềm đang dần nhanh hơn so với phần cứng. Ý nghĩa của định luật wirth là các phần mềm đang dần ngày càng phức tạp, và dần dần các phần cứng trở nên không đáp ứng được với sự phức tạp của nó. Nhất là trong quá trình vật liệu ngày càng khó khăn, thời gian định luật moore ngày càng kéo dài và có thể không còn đúng nữa, thì việc phần mềm vẫn đang phát triển vô cùng chóng mặt. Đơn giản như các hệ điều hành của microsoft, cứ chu kỳ khoảng 2 năm ra một bản, và các bản sau phức tạp hơn, yêu cầu phần cứng khắt khe hơn. Trên phương diện internet có thể hiểu như tốc độ truyền tải dữ liệu hạn chế, trong khi yêu cầu gửi tin video hoặc chất lượng dữ liệu cao thì ngày càng tăng cao. Chính điều đó cũng là một thách thức với ngành công nghiệp phần cứng.","link":"/gratuit-blog/2020/04/05/software-principle-2/"}],"tags":[{"name":"guideline","slug":"guideline","link":"/gratuit-blog/tags/guideline/"},{"name":"software","slug":"software","link":"/gratuit-blog/tags/software/"},{"name":"principle","slug":"principle","link":"/gratuit-blog/tags/principle/"},{"name":"production","slug":"production","link":"/gratuit-blog/tags/production/"}],"categories":[{"name":"software","slug":"software","link":"/gratuit-blog/categories/software/"}]}